Goal
Build the backend for the "UMPSA Community Platform" (MERN) — implement the Node.js + Express + MongoDB backend first. Work incrementally in clear stages. For each stage:
  1. Implement the required code (models, controllers, routes, middleware, tests).
  2. Add minimal unit/integration tests or Postman examples that prove the required behavior.
  3. Provide example usage (curl/Postman JSON) and an explanation of the expected results.
Only proceed to the next stage once the current stage is complete and passes its acceptance criteria.

General requirements (global rules)
- Node.js + Express, MongoDB (Mongoose). Node >= 16 recommended.
- Use JWT for auth; bcrypt for hashing.
- All passwords must be stored hashed (bcrypt).
- Default user role for all imported/created users is `student`. Only admins can promote users to `clubMember` or `admin`.
- Admins are the only ones who can create clubs. When creating a club, admin must assign at least one existing user as a club member — those assigned users must be promoted to role `clubMember` and have the club added to their `clubs` array.
- Posts (feed & club): once created, **no editing allowed**. Deletion is **permanent** and allowed **only by admins**. Deletion should cascade-delete the post's comments and reactions.
- Feed posts by `student` or `clubMember` are created in `pending` state and must be approved by an admin to appear on the feed. Admin-created feed posts are `approved` immediately.
- Club posts created by `clubMember` assigned to that club go live immediately.
- Restricted users cannot create posts, comment, react, or submit reports.
- Reactions: user may have at most one reaction per post. Adding a new reaction replaces the prior reaction. Removing reaction deletes it.
- Media: support media in posts/comments via file upload to a cloud (Cloudinary recommended) or local storage for development.
- No soft deletes. Deletes are permanent.

Required libraries
- express, mongoose, jsonwebtoken, bcryptjs
- multer, cloudinary (or aws-sdk) for media
- exceljs (or xlsx) for Excel import
- express-validator (or similar) for input validation
- optional: dotenv, jest/supertest (for tests)

Folder structure (suggested)
/src
  /config
  /models
  /controllers
  /routes
  /middlewares
  /services
  /utils
  app.js
  server.js
  tests/

STEPS (incremental)

STEP 1 — Project scaffold + config
- Initialize project, install dependencies, add .env.example with:
    MONGO_URI, JWT_SECRET, JWT_EXPIRE, CLOUDINARY_URL (if used), PORT
- Setup express app, mongoose connection, and central error handler.
- Create environment-based config loader.

Acceptance criteria:
- App starts, connects to MongoDB, responds to GET /health with 200 and `{ status: "ok" }`.
- Show example .env and start script.

STEP 2 — Mongoose models (data schemas)
Implement Mongoose schemas (timestamps true) with validations and indexes.
Provide schemas as models in /src/models:

User
- studentId: { type: String, unique: true, required: true }
- passwordHash: { type: String, required: true }
- role: { type: String, enum: ["student","clubMember","admin"], default: "student" }
- nickname: { type: String }
- email: { type: String, index: true, sparse: true }
- profilePicture: { type: String } // url
- clubs: [{ type: mongoose.Schema.Types.ObjectId, ref: "Club" }]
- restriction: {
    status: { type: Boolean, default: false },
    type: { type: String, enum: ["temporary","permanent"], default: null },
    reason: { type: String, default: null },
    restrictedUntil: { type: Date, default: null }
  }
- createdAt, updatedAt

Club
- name: { type: String, required: true, unique: true }
- banner: String
- profilePicture: String
- about: String
- contactInfo: String
- members: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }]
- createdBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" }
- createdAt, updatedAt

FeedPost
- author: { type: ObjectId ref User, required }
- content: { type: String }
- media: [String]
- type: { type: String, enum: ["text","media","poll","link","calendar"], default: "text" }
- status: { type: String, enum: ["pending","approved","rejected"], default: "pending" }
- comments: [{ type: ObjectId, ref: "Comment" }]
- reactions: [{ type: ObjectId, ref: "Reaction" }]
- createdAt, updatedAt

ClubPost
- club: { type: ObjectId ref Club, required }
- author: { type: ObjectId ref User, required }
- content, media, comments[], reactions[]
- createdAt, updatedAt

Comment
- postId: { type: ObjectId, required }  // store the post id (feed or club)
- postType: { type: String, enum: ["feed","club"], required }
- author: { type: ObjectId, ref: "User", required }
- content: String
- media: [String]
- createdAt, updatedAt

Reaction
- postId: { type: ObjectId, required }
- postType: { type: String, enum: ["feed","club"], required }
- user: { type: ObjectId, ref: "User", required }
- type: { type: String, enum: ["like","love","laugh","dislike"], required }
- createdAt
- Add a unique compound index on (postId, user) to prevent duplicates.

Report
- submittedBy: { type: ObjectId ref User, required }
- againstUser: { type: ObjectId ref User } // optional
- club: { type: ObjectId ref Club } // optional
- description: String
- status: { type: String, enum: ["open","resolved","dismissed"], default: "open" }
- handledBy: { type: ObjectId ref User } // admin
- createdAt, updatedAt

Acceptance criteria:
- Models compile, create indexes, and pass basic schema validation tests.

STEP 3 — Authentication and middleware
- Implement auth routes:
  - POST /auth/login — accepts `{ studentId, password }`, returns `{ token, user }`.
  - There is no public register — users are imported via Excel or created by admin.
- Implement middleware:
  - `authenticateJWT` — verifies JWT, attaches `req.user` (id, role).
  - `authorizeRoles(...roles)` — checks `req.user.role` (admins bypass where indicated).
  - `checkNotRestricted` — rejects actions if `req.user.restriction.status === true` AND current date < restrictedUntil (for temporary).
- JWT payload should include userId and role. Use `JWT_SECRET` and reasonable expiry (e.g., 7d).
- Seed/Create initial admin: provide a CLI script or env-driven seed to create an initial admin account (hashed password) to allow first login.

Acceptance criteria:
- Login returns a valid JWT.
- Protected route `/test/protected` is accessible only with valid JWT.
- `checkNotRestricted` denies a restricted user from hitting a protected POST endpoint used for creating posts.

STEP 4 — Excel import (dynamic)
- Implement POST /admin/import-users (admin-only) accepting multipart form file field `file`:
  - Parse using `exceljs` (or `xlsx`).
  - Expected columns: `studentId` (required), `password` (optional), `email` (optional), `nickname` (optional).
  - For each row:
    - If studentId does not exist → create new User with `role: "student"` and hash password if provided. If no password provided, generate a secure random password and return it in the import report (or require password).
    - If studentId exists → update only `email` and `nickname` if provided; do NOT change `role`. Update password only if `password` is provided (hash before storing).
    - Do not create or modify admins or club membership via Excel. Excel import cannot change role from student to clubMember/admin.
  - Return a JSON summary: `{ created: n, updated: m, errors: [...] }`.
- Support large files: use `bulkWrite` for better performance for big imports.

Acceptance criteria:
- Uploading an Excel with new users creates them as `student`.
- Re-uploading with updated nickname updates the respective user.
- Roles are preserved (no accidental promotion).

STEP 5 — User management endpoints (admin)
- GET /users — admin-only, paginated list.
- GET /users/:id — admin-only or user themself.
- PUT /users/:id/profile — allows user updating their own nickname, profile picture (multipart upload to cloud).
- POST /users/:id/promote-to-admin — admin-only (promote given user to admin).
- POST /users/:id/assign-club/:clubId — admin-only: when assigning member to club:
  - Add clubId to `user.clubs` and user id to `club.members`.
  - If user.role is `student`, set user.role = `clubMember`.
- POST /users/:id/remove-club/:clubId — admin-only: remove membership; if user has zero clubs after removal, set role back to `student` (unless admin).
- POST /users/:id/restrict — admin-only: sets `restriction` with `status=true`, `type`, `reason`, `restrictedUntil` (if temporary).
- POST /users/:id/unrestrict — admin-only: clears restriction fields (`status=false`, null dates).
- Make sure only admins can call promote/unrestrict endpoints.

Acceptance criteria:
- Admin assigns a user to a club → user role becomes `clubMember` if was `student`.
- Removing last club from a `clubMember` downgrades them to `student`.

STEP 6 — Clubs: creation & management
- POST /clubs — admin-only. Body: `{ name, about, contactInfo, banner?, profilePicture?, initialMembers: [studentId1, studentId2, ...] }`.
  - Validation: initialMembers must contain at least one valid existing user id.
  - For each initialMember:
    - Add to club.members and add club to user.clubs.
    - Promote user.role to `clubMember` if currently `student`.
  - Save createdBy as the admin ID.
- GET /clubs — public (authenticated): list clubs.
- GET /clubs/:id — public: return club details (banner, about, members list).
- PUT /clubs/:id — allowed only for:
  - admin OR
  - clubMember who is a member of that club.
  - Fields updatable: banner, profilePicture, about, contactInfo. (Club members can edit their own club.)
- POST /clubs/:id/add-member — allowed for admin OR clubMember of that club:
  - Add new member userId to club.members and club to user.clubs; promote to `clubMember` if needed.
- POST /clubs/:id/remove-member — admin-only or clubMember of that club; cannot remove the last assigned clubMember (validation).
- DELETE /clubs/:id — admin-only — deletes club and removes club from all user's `clubs` arrays. (Permanent delete)

Acceptance criteria:
- Admin can create a club only when at least one member is assigned; assigned users become `clubMember`.
- Club member can update club details.
- Cannot remove the last club member (validation).

STEP 7 — Feed posts (global feed) — submission, moderation, deletion
- POST /feed — create feed post.
  - Allowed for student, clubMember, admin but must check `checkNotRestricted`.
  - If role is `admin` → create with `status: approved`.
  - If role is `student` or `clubMember` → create with `status: pending`.
  - No editing allowed.
- GET /feed — lists only `approved` posts (paginated).
- GET /feed/pending — admin-only, lists `pending` posts.
- POST /feed/:id/approve — admin-only, sets `status = approved` (once approved cannot be edited later).
- POST /feed/:id/reject — admin-only, sets `status = rejected` (rejected posts are not shown).
- DELETE /feed/:id — admin-only, permanently deletes the post and cascades delete on comments and reactions.
- When returning a post include aggregated reaction counts and a limited comments payload (or a comment count + fetch comments endpoint).

Acceptance criteria:
- Student/clubMember post appears in pending list and not in feed until admin approves.
- Admin-created post is immediately visible in feed.
- Admin can permanently delete a post and its comments/reactions.

STEP 8 — Club posts
- POST /clubs/:clubId/posts — only allowed for a user who is a `clubMember` and belongs to that club AND not restricted. Creates a ClubPost (auto-approved).
- GET /clubs/:clubId/posts — public for authenticated users, returns posts for that club.
- DELETE /clubs/:clubId/posts/:postId — admin-only, permanent delete cascade.
- No editing allowed for club posts.

Acceptance criteria:
- Club member can create a club post that appears immediately.
- Only admin can delete club posts permanently.

STEP 9 — Comments & Reactions
Comments
- POST /posts/:postType(feed|club)/:postId/comments — create comment:
  - User must not be restricted.
  - Save comment with postType so both feed and club posts are supported.
- GET /posts/:postType/:postId/comments — return comments list (paginated).
- DELETE /comments/:commentId — admin-only permanent delete.
- No editing allowed for comments.

Reactions
- POST /posts/:postType/:postId/reactions — body `{ type: "like"|"love"|"laugh"|"dislike" }`:
  - User must not be restricted.
  - If a reaction by this user for the post exists → update its `type`.
  - If body contains a special flag to remove reaction (e.g. `{ remove: true }`) → delete the reaction.
- Aggregation: create controllers that can return counts per type for a given post via aggregation pipeline or precomputed counters.

Acceptance criteria:
- A user can react once; a second reaction from same user updates existing reaction type.
- Restricted users cannot comment or react.

STEP 10 — Reports & restriction flow
- POST /reports — users (not restricted) can submit a report.
  - Required: `description`, optional `againstUser`, optional `club`.
- GET /reports — admin-only list open reports.
- POST /reports/:id/resolve — admin-only mark as resolved; set `handledBy` and optionally record action note.
- POST /reports/:id/dismiss — admin-only mark as dismissed.
- POST /reports/:id/restrictUser — admin-only: restrict the user implicated in the report (or any user) with payload `{ type: "temporary"|"permanent", reason, restrictedUntil? }`.
  - On restricting: set user.restriction fields accordingly.
  - Make sure restriction prevents posts/comments/reactions/reports (via the `checkNotRestricted` middleware).
- POST /users/:id/unrestrict — admin-only (also in STEP 5).

Acceptance criteria:
- Admin can restrict a user from the reports endpoint; user then cannot create posts/comments/reactions/reports.

STEP 11 — File uploads / media
- Implement file upload service:
  - Use multer for upload handling and Cloudinary (or S3) SDK to store files in cloud.
  - Support uploading profilePicture, club banner/profilePicture, post media, comment media.
- Return accessible URLs stored in model fields (profilePicture, media[]).

Acceptance criteria:
- Upload endpoint returns a URL that can be used in post creation and profile updates.

STEP 12 — Data integrity & cascade deletes
- When an admin permanently deletes a FeedPost or ClubPost:
  - Delete the post document.
  - Delete all Comment documents where `postId = deletedId`.
  - Delete all Reaction documents where `postId = deletedId`.
- When deleting a Club, remove the club from all users’ `clubs` arrays.
- Use Mongoose transactions where appropriate (session) to ensure multi-document consistency. If transactions are not supported in the environment, perform clean multi-step deletes with checks.

Acceptance criteria:
- Deleting a post removes all related comments & reactions.
- Deleting a club removes club references from users.

STEP 13 — API documentation & examples
- For each route, produce:
  - Route path, method, required body, auth requirement, and sample success response.
  - Example curl or Postman body for main workflows:
    1. Excel import -> new users created
    2. Admin create club and assign initial member(s)
    3. Student posts feed post -> admin approves -> post appears
    4. ClubMember posts club post -> appears immediately
    5. User comments & reacts; admin deletes post -> post gone and comments/reactions removed
    6. User reported -> admin restricts user -> restricted user can't post/comment/react

STEP 14 — Tests & sanity checks
- Provide unit/integration tests (jest + supertest or equivalent) for:
  - Auth: login & protected routes
  - Excel import: create/update behavior, role preservation
  - Club creation: must require at least one member and promote assigned members
  - Feed post moderation: student post pending; admin approve; admin delete
  - Restriction: restricted user cannot perform actions
  - Reactions: uniqueness per (post,user) and update behavior
- Provide a Postman collection equivalent if tests are not achievable immediately.

STEP 15 — README, environment & seed
- Add a README with setup, env vars, how to run tests, how to seed initial admin account (CLI script or env-driven seed).
- Provide sample Excel file format.

Acceptance criteria:
- README is clear and developer can run the backend, run tests, and test the key flows.

Extra notes / constraints (restate to ensure compliance)
- No user-facing registration endpoint; users are created via Excel import or by admin.
- All posts/comments cannot be edited once created.
- All deletes are permanent — no soft deletes or audit logs in DB (unless explicitly asked later).
- Clubs must always have at least one club member; attempts to remove the last member or create a club without members must fail validation.
- When creating or adding a member to a club, if that user is a `student`, promote them to `clubMember`.
- Admins can always perform any action and are the gatekeepers for moderation actions.
- Reactions must be deduped at DB level with a unique index on (postId, user) and enforced in app logic.
- Implement `checkNotRestricted` middleware and apply it to all endpoints that create posts, create comments, create reactions, or create reports.

Deliverables for each stage
- Source files for models, controllers, routes, middlewares, services
- Example tests and/or Postman collection for main flows
- README and example .env
- Example seed script to create initial admin

When done with the final step and all acceptance criteria pass, STOP backend work and indicate "BACKEND COMPLETE — READY FOR FRONTEND" and wait for further instructions to start the frontend.

